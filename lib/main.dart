import 'package:firebase_core/firebase_core.dart';
import 'package:flutter/material.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:inventario_app/firebase_options.dart';
import 'package:inventario_app/services/inventory_service.dart';
import 'package:provider/provider.dart';
import 'dart:async'; // Para TimeoutException
import '/screens/login_screen.dart';
import '/screens/main_screen.dart';
import '/providers/auth_provider.dart';
import '/services/database_helper.dart';

void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  
  print('üöÄ Iniciando inicializaci√≥n de la aplicaci√≥n...');
  
  // ‚úÖ 1. PRIMERO inicializar Firebase
  print('üî• Inicializando Firebase...');
  try {
    await Firebase.initializeApp(
      options: DefaultFirebaseOptions.currentPlatform,
    );
    print('‚úÖ Firebase inicializado correctamente');
    print('üìä Project ID: ${DefaultFirebaseOptions.currentPlatform.projectId}');
    
    // üîç DIAGN√ìSTICO FIRESTORE - PARA BASE DE DATOS NUEVA "inv-mro"
    print('üîç Iniciando diagn√≥stico Firestore (base de datos: inv-mro)...');
    try {
      final firestore = FirebaseFirestore.instance;
      print('   ‚úÖ Instancia Firestore obtenida');
      
      // Probar con colecci√≥n que usar√° la app
      final testDoc = firestore.collection('items').doc('test_conexion');
      
      print('   ‚è≥ Intentando escritura en colecci√≥n "items"...');
      
      // Usar timeout para evitar que se quede trabado
      await testDoc.set({
        'nombre': 'Item de prueba - Conexi√≥n Firestore',
        'descripcion': 'Verificando conexi√≥n con base de datos inv-mro',
        'timestamp': FieldValue.serverTimestamp(),
        'proyecto': DefaultFirebaseOptions.currentPlatform.projectId,
        'base_datos': 'inv-mro',
      }).timeout(const Duration(seconds: 15), onTimeout: () {
        throw TimeoutException('Firestore no respondi√≥ despu√©s de 15 segundos');
      });
      
      print('   ‚úÖ Escritura Firestore exitosa en "items"');
      
      // Probar operaci√≥n de lectura
      print('   ‚è≥ Intentando lectura...');
      final snapshot = await testDoc.get().timeout(const Duration(seconds: 10));
      print('   ‚úÖ Lectura Firestore exitosa');
      print('   üìÑ Datos guardados: ${snapshot.data()}');
      
      // Limpiar test (opcional)
      await testDoc.delete().timeout(const Duration(seconds: 5));
      print('   üßπ Test de diagn√≥stico limpiado');
      
      print('üéØ Firestore funcionando correctamente ‚úÖ');
      print('   Base de datos: inv-mro');
      print('   Project ID: ${DefaultFirebaseOptions.currentPlatform.projectId}');
      
    } catch (e) {
      print('‚ùå Error en diagn√≥stico Firestore:');
      print('   Tipo: ${e.runtimeType}');
      print('   Mensaje: $e');
      
      if (e is FirebaseException) {
        print('   C√≥digo: ${e.code}');
        print('   Detalles: ${e.message}');
        
        if (e.code == 'permission-denied') {
          print('   üîç PROBLEMA: Permisos denegados');
          print('   üí° SOLUCI√ìN: Verifica las reglas en Firebase Console');
        }
        
        if (e.code == 'not-found') {
          print('   üîç PROBLEMA: Base de datos no encontrada');
          print('   üí° SOLUCI√ìN: La base de datos inv-mro puede necesitar m√°s tiempo para activarse');
        }
      }
      
      if (e is TimeoutException) {
        print('   üîç PROBLEMA: Timeout de conexi√≥n');
        print('   üí° SOLUCI√ìN: La base de datos inv-mro est√° cre√°ndose');
        print('   ‚è∞ Espera 5-10 minutos y reinicia la app');
        print('   üîó Verifica: https://console.firebase.google.com/project/invapp-5f0f9/firestore');
      }
      
      print('   üí° La app funcionar√° con SQLite local mientras se resuelve Firestore');
    }
    
  } catch (e) {
    print('‚ùå Error inicializando Firebase: $e');
  }
  
  // ‚úÖ 2. LUEGO inicializar base de datos SQLite
  print('üíæ Inicializando base de datos local...');
  final dbHelper = DatabaseHelper();
  await dbHelper.database;
  
  // ‚úÖ 3. FINALMENTE inicializar InventoryService
  print('üîÑ Inicializando InventoryService...');
  await InventoryService.initialize();

  // ‚úÖ 4. FORZAR SQLITE MIENTRAS SE RESUELVE FIRESTORE
  print('üõ°Ô∏è  Configurando modo de operaci√≥n...');
  try {
    await InventoryService().switchToSQLite();
    print('üíæ Modo SQLite activado - App funcionando correctamente');
    print('   üìç Base de datos local: inventario.db');
  } catch (e) {
    print('‚ö†Ô∏è  Error configurando SQLite: $e');
  }
  
  print('üéØ Todas las inicializaciones completadas');
  print('   ‚úÖ SQLite Local: Operativo');
  print('   üîÑ Firestore (inv-mro): En verificaci√≥n');
  print('   üöÄ Aplicaci√≥n lista para usar');
  
  runApp(
    MultiProvider(
      providers: [
        ChangeNotifierProvider(create: (context) => AuthProvider()),
        Provider(create: (context) => InventoryService()),
      ],
      child: const MyApp(),
    ),
  );
}

class MyApp extends StatelessWidget {
  const MyApp({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Sistema de Inventario',
      theme: ThemeData(
        primarySwatch: Colors.blueGrey,
        visualDensity: VisualDensity.adaptivePlatformDensity,
      ),
      home: Consumer<AuthProvider>(
        builder: (context, auth, child) {
          print('üè† MyApp - isLoggedIn: ${auth.isLoggedIn}');
          return auth.isLoggedIn ? const MainScreen() : const LoginScreen();
        },
      ),
      debugShowCheckedModeBanner: false,
    );
  }
}